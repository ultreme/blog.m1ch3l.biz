// Generated by CoffeeScript 1.9.3
(function() {
  var getDate, options, page, params, showHelp, system;

  page = require('webpage').create();

  system = require('system');

  getDate = function() {
    var date;
    date = new Date();
    return date.getUTCFullYear() + '-' + ('00' + (date.getUTCMonth() + 1)).slice(-2) + '-' + ('00' + date.getUTCDate()).slice(-2) + ' ' + ('00' + date.getUTCHours()).slice(-2) + ':' + ('00' + date.getUTCMinutes()).slice(-2) + ':' + ('00' + date.getUTCSeconds()).slice(-2);
  };

  params = ['-u,  --url              The page URL', '-s,  --selector         [The selector, body by defaut]', '-i,  --image            [The output image, screenshot-DATE.png by default]', '-vw, --viewport-width   [The viewport width, 1024 by default]', '-vh, --viewport-height  [The viewport height, 768 by default]', '-c,  --css              [CSS rules]', '-j,  --js               [JavaScript script]', '-t,  --timeout          [Timeout]', '-h,  --help             Show this message'];

  showHelp = function() {
    console.log('Usage:');
    params.forEach(function(param) {
      return console.log('    ' + param);
    });
    return phantom.exit();
  };

  options = {
    url: '',
    selector: 'body',
    image: 'screenshot-' + getDate() + '.png',
    viewportWidth: 1024,
    viewportHeight: 768,
    css: '',
    js: '',
    timeout: 4
  };

  system.args.forEach(function(arg, i) {
    switch (arg) {
      case '-u':
      case '--url':
        return options.url = system.args[i + 1];
      case '-s':
      case '--selector':
        return options.selector = system.args[i + 1];
      case '-i':
      case '--image':
        return options.image = system.args[i + 1];
      case '-vw':
      case '--viewport-width':
        return options.viewportWidth = system.args[i + 1];
      case '-vh':
      case '--viewport-height':
        return options.viewportHeight = system.args[i + 1];
      case '-c':
      case '--css':
        return options.css = system.args[i + 1];
      case '-j':
      case '--js':
        return options.js = system.args[i + 1];
      case '-t':
      case '--timeout':
        return options.timeout = system.args[i + 1];
      case '-h':
      case '--help':
        showHelp();
        return null;
    }
  });

  if (system.args.length === 1) {
    showHelp();
  } else {
    if (options.url === '') {
      console.error('No URL specified!');
      phantom.exit();
    }
    page.viewportSize = {
      width: options.viewportWidth,
      height: options.viewportHeight
    };
    page.open(options.url, function(status) {
      if (status !== 'success') {
        console.error('Unable to load the address "' + options.url + '"!');
        return phantom.exit();
      } else {
        return setTimeout(function() {
          page.clipRect = page.evaluate(function(sel, css, js) {
            var clipRect, style;
            if (css) {
              style = document.createElement('style');
              style.appendChild(document.createTextNode(css));
              document.head.appendChild(style);
            }
            if (js) {
              eval(js);
            }
            clipRect = document.querySelector(sel).getBoundingClientRect();
            return {
              top: clipRect.top,
              left: clipRect.left,
              width: clipRect.width,
              height: clipRect.height
            };
          }, options.selector, options.css, options.js);
          page.render(options.image);
          return phantom.exit();
        }, options.timeout);
      }
    });
  }

}).call(this);
